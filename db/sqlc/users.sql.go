// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users (id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version)
VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateUserParams struct {
	ID                    uint32       `json:"id"`
	UserStatusID          uint32       `json:"user_status_id"`
	UserTypeID            uint32       `json:"user_type_id"`
	FullName              string       `json:"full_name"`
	Email                 string       `json:"email"`
	Password              string       `json:"password"`
	PhoneNumber           string       `json:"phone_number"`
	Role                  UsersRole    `json:"role"`
	Status                UsersStatus  `json:"status"`
	EmailVerifiedAt       sql.NullTime `json:"email_verified_at"`
	PhoneNumberVerifiedAt sql.NullTime `json:"phone_number_verified_at"`
	ApiKey                string       `json:"api_key"`
	CreatedAt             time.Time    `json:"created_at"`
	UpdatedAt             time.Time    `json:"updated_at"`
	DeletedAt             sql.NullTime `json:"deleted_at"`
	Version               int32        `json:"version"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.db.ExecContext(ctx, createUser,
		arg.ID,
		arg.UserStatusID,
		arg.UserTypeID,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.Role,
		arg.Status,
		arg.EmailVerifiedAt,
		arg.PhoneNumberVerifiedAt,
		arg.ApiKey,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Version,
	)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUser = `-- name: GetUser :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE email = ? LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUserByEmailAndPassword = `-- name: GetUserByEmailAndPassword :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE email = ? AND password = ? LIMIT 1
`

type GetUserByEmailAndPasswordParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) GetUserByEmailAndPassword(ctx context.Context, arg GetUserByEmailAndPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmailAndPassword, arg.Email, arg.Password)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint32) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUserByIdAndVersion = `-- name: GetUserByIdAndVersion :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE id = ? AND version = ? LIMIT 1
`

type GetUserByIdAndVersionParams struct {
	ID      uint32 `json:"id"`
	Version int32  `json:"version"`
}

func (q *Queries) GetUserByIdAndVersion(ctx context.Context, arg GetUserByIdAndVersionParams) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByIdAndVersion, arg.ID, arg.Version)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUserByPhoneNumber = `-- name: GetUserByPhoneNumber :one
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users WHERE phone_number = ? LIMIT 1
`

func (q *Queries) GetUserByPhoneNumber(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhoneNumber, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.UserStatusID,
		&i.UserTypeID,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.PhoneNumber,
		&i.Role,
		&i.Status,
		&i.EmailVerifiedAt,
		&i.PhoneNumberVerifiedAt,
		&i.ApiKey,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.Version,
	)
	return i, err
}

const getUsers = `-- name: GetUsers :many
SELECT id, user_status_id, user_type_id, full_name, email, password, phone_number, role, status, email_verified_at, phone_number_verified_at, api_key, created_at, updated_at, deleted_at, version FROM users
`

func (q *Queries) GetUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.UserStatusID,
			&i.UserTypeID,
			&i.FullName,
			&i.Email,
			&i.Password,
			&i.PhoneNumber,
			&i.Role,
			&i.Status,
			&i.EmailVerifiedAt,
			&i.PhoneNumberVerifiedAt,
			&i.ApiKey,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.Version,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserActive = `-- name: IsUserActive :one
SELECT status = 'active' AS is_active FROM users WHERE id = ?
`

func (q *Queries) IsUserActive(ctx context.Context, id uint32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserActive, id)
	var is_active bool
	err := row.Scan(&is_active)
	return is_active, err
}

const isUserAdmin = `-- name: IsUserAdmin :one
SELECT role = 'admin' AS is_admin FROM users WHERE id = ?
`

func (q *Queries) IsUserAdmin(ctx context.Context, id uint32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserAdmin, id)
	var is_admin bool
	err := row.Scan(&is_admin)
	return is_admin, err
}

const isUserDeleted = `-- name: IsUserDeleted :one
SELECT deleted_at IS NOT NULL AS is_deleted FROM users WHERE id = ?
`

func (q *Queries) IsUserDeleted(ctx context.Context, id uint32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserDeleted, id)
	var is_deleted bool
	err := row.Scan(&is_deleted)
	return is_deleted, err
}

const isUserEmailExists = `-- name: IsUserEmailExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE email = ?) AS email_exists
`

func (q *Queries) IsUserEmailExists(ctx context.Context, email string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserEmailExists, email)
	var email_exists bool
	err := row.Scan(&email_exists)
	return email_exists, err
}

const isUserEmailVerified = `-- name: IsUserEmailVerified :one
SELECT email_verified_at IS NOT NULL AS is_email_verified FROM users WHERE id = ?
`

func (q *Queries) IsUserEmailVerified(ctx context.Context, id uint32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserEmailVerified, id)
	var is_email_verified bool
	err := row.Scan(&is_email_verified)
	return is_email_verified, err
}

const isUserPhoneNumberExists = `-- name: IsUserPhoneNumberExists :one
SELECT EXISTS(SELECT 1 FROM users WHERE phone_number = ?) AS phone_number_exists
`

func (q *Queries) IsUserPhoneNumberExists(ctx context.Context, phoneNumber string) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserPhoneNumberExists, phoneNumber)
	var phone_number_exists bool
	err := row.Scan(&phone_number_exists)
	return phone_number_exists, err
}

const isUserPhoneNumberVerified = `-- name: IsUserPhoneNumberVerified :one
SELECT phone_number_verified_at IS NOT NULL AS is_phone_number_verified FROM users WHERE id = ?
`

func (q *Queries) IsUserPhoneNumberVerified(ctx context.Context, id uint32) (bool, error) {
	row := q.db.QueryRowContext(ctx, isUserPhoneNumberVerified, id)
	var is_phone_number_verified bool
	err := row.Scan(&is_phone_number_verified)
	return is_phone_number_verified, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users SET user_status_id = ?, user_type_id = ?, full_name = ?, email = ?, password = ?, phone_number = ?, role = ?, status = ?, email_verified_at = ?, phone_number_verified_at = ?, api_key = ?, created_at = ?, updated_at = ?, deleted_at = ?, version = ? WHERE id = ?
`

type UpdateUserParams struct {
	UserStatusID          uint32       `json:"user_status_id"`
	UserTypeID            uint32       `json:"user_type_id"`
	FullName              string       `json:"full_name"`
	Email                 string       `json:"email"`
	Password              string       `json:"password"`
	PhoneNumber           string       `json:"phone_number"`
	Role                  UsersRole    `json:"role"`
	Status                UsersStatus  `json:"status"`
	EmailVerifiedAt       sql.NullTime `json:"email_verified_at"`
	PhoneNumberVerifiedAt sql.NullTime `json:"phone_number_verified_at"`
	ApiKey                string       `json:"api_key"`
	CreatedAt             time.Time    `json:"created_at"`
	UpdatedAt             time.Time    `json:"updated_at"`
	DeletedAt             sql.NullTime `json:"deleted_at"`
	Version               int32        `json:"version"`
	ID                    uint32       `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.UserStatusID,
		arg.UserTypeID,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.PhoneNumber,
		arg.Role,
		arg.Status,
		arg.EmailVerifiedAt,
		arg.PhoneNumberVerifiedAt,
		arg.ApiKey,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.Version,
		arg.ID,
	)
	return err
}
